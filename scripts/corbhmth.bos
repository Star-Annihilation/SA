#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, fanbox, vent1, vent2, fan, turret, sleeve, barrel1,
       flare1, barrel2, flare2, barrel3, flare3;

static-var  gun_1;

// Signal definitions
#define SIG_AIM				2

SmokeVents()
{
	signal 4;
	set-signal-mask 4;
	spin fan around y-axis speed <-250.060440>;
	
	while( TRUE )
	{
		emit-sfx 257 from vent1;
		emit-sfx 257 from vent2;
		emit-sfx 256 from vent1;
		emit-sfx 256 from vent2;
		sleep 100;
		emit-sfx 257 from vent1;
		emit-sfx 257 from vent2;
		emit-sfx 256 from vent1;
		emit-sfx 256 from vent2;
		sleep 100;
		emit-sfx 257 from vent1;
		emit-sfx 257 from vent2;
		emit-sfx 256 from vent1;
		emit-sfx 256 from vent2;
		sleep 800;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	start-script SmokeVents();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	hide flare1;
	hide flare2;
	hide flare3;
	gun_1 = 0;
	start-script SmokeUnit();
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <25.000000>;
	turn sleeve to x-axis <0.000000> - pitch speed <25.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	return (1);
}

FirePrimary()
{
	move barrel1 to z-axis [-3.000000] now;
	emit-sfx 1024 from flare1;
	sleep 500;
	move barrel1 to z-axis [0.000000] speed [1.000000];
	++gun_1;
	move barrel2 to z-axis [-3.000000] now;
	emit-sfx 1024 from flare2;
	sleep 500;
	move barrel2 to z-axis [0.000000] speed [1.000000];
	++gun_1;
	move barrel3 to z-axis [-3.000000] now;
	emit-sfx 1024 from flare3;
	sleep 500;
	move barrel3 to z-axis [0.000000] speed [1.000000];
	gun_1 = 0;
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = flare1;
	}
	if( gun_1 == 1 )
	{
		piecenum = flare2;
	}
	if( gun_1 == 2 )
	{
		piecenum = flare3;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = sleeve;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flare1;
	hide flare2;
	hide flare3;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type NOHEATCLOUD | SHATTER;
		explode fanbox type NOHEATCLOUD;
		explode vent1 type NOHEATCLOUD;
		explode vent2 type NOHEATCLOUD;
		explode fan type NOHEATCLOUD | FALL;
		explode turret type NOHEATCLOUD;
		explode barrel1 type NOHEATCLOUD;
		explode barrel2 type NOHEATCLOUD;
		explode barrel3 type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type NOHEATCLOUD | SHATTER;
		explode fanbox type NOHEATCLOUD;
		explode vent1 type NOHEATCLOUD;
		explode vent2 type NOHEATCLOUD;
		explode fan type NOHEATCLOUD | FALL;
		explode turret type NOHEATCLOUD | FALL | SMOKE;
		explode barrel1 type NOHEATCLOUD;
		explode barrel2 type NOHEATCLOUD;
		explode barrel3 type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type NOHEATCLOUD | SHATTER;
		explode fanbox type NOHEATCLOUD;
		explode vent1 type NOHEATCLOUD;
		explode vent2 type NOHEATCLOUD;
		explode fan type NOHEATCLOUD | FALL;
		explode turret type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode barrel1 type NOHEATCLOUD;
		explode barrel2 type NOHEATCLOUD;
		explode barrel3 type NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode base type NOHEATCLOUD | SHATTER;
	explode fanbox type NOHEATCLOUD;
	explode vent1 type NOHEATCLOUD;
	explode vent2 type NOHEATCLOUD;
	explode fan type NOHEATCLOUD | FALL;
	explode turret type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode barrel1 type NOHEATCLOUD;
	explode barrel2 type NOHEATCLOUD;
	explode barrel3 type NOHEATCLOUD;
	return (corpsetype);
}
