#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, beam, door1, door2, plate, nano, body;

static-var  S_Var_1, S_Var_3, S_Var_4, S_Var_5, spray;

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from body;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

RequestState()
{
	while( ( !S_Var_5 ) AND S_Var_3 != S_Var_4 )
	{
		S_Var_5 = 1;
		if( S_Var_3 AND ( !S_Var_4 ) )
		{
			move door1 to x-axis [0] now;
			move door2 to x-axis [0] now;
			move door1 to x-axis [2.8] speed [4];
			move door2 to x-axis [-2.8] speed [4];
			wait-for-move door1 along x-axis; 
			turn door1 to z-axis <-40> speed <60>;
			turn door2 to z-axis <40> speed <60>;
			move plate to y-axis [4.08] speed [5];
			wait-for-move plate along y-axis;
			turn nano to y-axis S_Var_1 speed <160>;
			wait-for-turn nano around y-axis;
			set INBUILDSTANCE to 1;
			S_Var_4 = 1;
		}
		if( ( !S_Var_3 ) AND S_Var_4 )
		{
			S_Var_4 = 0;
			set INBUILDSTANCE to 0;
			turn nano to y-axis <0> speed <160>;
			wait-for-turn nano around y-axis; 
			turn door1 to z-axis <0> speed <60>;
			turn door2 to z-axis <0> speed <60>;
			move plate to y-axis [0] speed [5];
			wait-for-move plate along y-axis;
			move door1 to x-axis [0] speed [4];
			move door2 to x-axis [0] speed [4];
			wait-for-move door1 along x-axis; 
		}
		S_Var_5 = 0;
	}
}

Create()
{
	spray = 0;
	S_Var_1 = 0;
	S_Var_3 = 0;
	S_Var_4 = 0;
	S_Var_5 = 0;
	start-script SmokeUnit();
}

StartBuilding(Func_Var_1)
{
	S_Var_1 = Func_Var_1;
	S_Var_3 = 1;
	start-script RequestState();
}

StopBuilding()
{
	S_Var_3 = 0;
	if( !S_Var_3 )
	{
		start-script RequestState();
	}
}

QueryNanoPiece(piecenum)
{
	piecenum = beam;
}

SweetSpot(piecenum)
{
	piecenum = body;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type NOHEATCLOUD;
		explode door1 type NOHEATCLOUD;
		explode door2 type NOHEATCLOUD;
		explode nano type NOHEATCLOUD;
		explode plate type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type NOHEATCLOUD ;
		explode door1 type FALL | NOHEATCLOUD ;
		explode door2 type BITMAPONLY | NOHEATCLOUD ;
		explode nano type SHATTER | NOHEATCLOUD ;
		explode plate type NOHEATCLOUD ;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode body type SHATTER | NOHEATCLOUD ;
		explode door1 type FALL | EXPLODE_ON_HIT | NOHEATCLOUD ;
		explode door2 type FALL | NOHEATCLOUD ;
		explode nano type SHATTER | EXPLODE_ON_HIT | NOHEATCLOUD ;
		explode plate type NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode body type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT || NOHEATCLOUD ;
	explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD ;
	explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD ;
	explode nano type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD ;
	explode plate type NOHEATCLOUD;
	return (corpsetype);
}