#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, nanoturd, nanobase, nanoturn, door1, door2, nano1,
       nano2, nano3, lath1, lath2, lath3, w1, w2, w3,
       w4, w5, w6, w7, w8, w9, w10, w11,
       w12, wakes;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4, Static_Var_5,
            Static_Var_6;


WobbleUnit()
{
	while( TRUE )
	{
		if( Static_Var_3 )
		{
			move base to y-axis [2.] speed [3.];
		}
		else
		{
			move base to y-axis [-0.] speed [3.];
		}
		Static_Var_3 = !Static_Var_3;
		sleep 750;
	}
}

HitByWeapon(anglex, anglez)
{
	signal 4;
	set-signal-mask 4;
	turn body to z-axis <0.> * anglez speed <105.>;
	turn body to x-axis <0.> * anglex speed <105.>;
	wait-for-turn body around z-axis;
	wait-for-turn body around x-axis;
	turn body to z-axis <0.> speed <30.>;
	turn body to x-axis <0.> speed <30.>;
}

BankClerck(Func_Var_1, Func_Var_2, Func_Var_3)
{
	while( TRUE )
	{
		Func_Var_1 = get PIECE_XZ(base);
		Func_Var_3 = 0;
		if( get XZ_HYPOT(Func_Var_1 - Func_Var_2) >= 163840 )
		{
			Func_Var_3 = 0 - get XZ_ATAN(Func_Var_2 - Func_Var_1) * 80 / 40;
		}
		turn body to z-axis Func_Var_3 speed <60.>;
		Func_Var_2 = Func_Var_1;
		sleep 300;
	}
}

activatescr()
{
	if( TRUE )
	{
		turn door1 to y-axis <180.> speed <-180.>;
		turn door2 to y-axis <180.> speed <-180.>;
		wait-for-turn door1 around y-axis;
	}
	if( TRUE )
	{
		move nano1 to y-axis [6.] speed [6.];
		move nano2 to y-axis [8.] speed [8.];
		move nano3 to y-axis [10.] speed [10.];
		wait-for-move nano1 along y-axis;
	}
	if( TRUE )
	{
		spin nano1 around y-axis speed <360.>;
		spin nano2 around y-axis speed <90.>;
		spin nano3 around y-axis speed <180.>;
	}
	sleep 39;
}

deactivatescr()
{
	if( TRUE )
	{
		stop-spin nano1 around y-axis;
		stop-spin nano2 around y-axis;
		stop-spin nano3 around y-axis;
		turn nano1 to y-axis <0.> speed <360.>;
		turn nano2 to y-axis <0.> speed <360.>;
		turn nano3 to y-axis <0.> speed <360.>;
		wait-for-turn nano2 around y-axis;
		wait-for-turn nano1 around y-axis;
		wait-for-turn nano3 around y-axis;
	}
	if( TRUE )
	{
		move nano1 to y-axis [0.] speed [6.];
		move nano2 to y-axis [0.] speed [8.];
		move nano3 to y-axis [0.] speed [10.];
		wait-for-move nano1 along y-axis;
	}
	if( TRUE )
	{
		cache nano1;
		cache nano2;
		cache nano3;
		cache body;
		turn door1 to y-axis <0.> speed <-180.>;
		turn door2 to y-axis <0.> speed <-180.>;
		wait-for-turn door1 around y-axis;
	}
	sleep 27;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 258;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 257;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Go()
{
	call-script activatescr();
	turn nanoturd to y-axis Static_Var_2 speed <180.>;
	move nanobase to z-axis [25.] speed [15.];
	set INBUILDSTANCE to 1;
}

Stop()
{
	set INBUILDSTANCE to 0;
	move nanobase to z-axis [0.] speed [15.];
	turn nanoturd to y-axis <0.> now;
	call-script deactivatescr();
}

InitState()
{
	Static_Var_5 = 1;
	Static_Var_6 = 0;
}

RequestState(requestedstate, currentstate)
{
	if( Static_Var_6 )
	{
		Static_Var_5 = requestedstate;
		return (0);
	}
	Static_Var_6 = 1;
	currentstate = Static_Var_5;
	Static_Var_5 = requestedstate;
	while( Static_Var_5 != currentstate )
	{
		if( Static_Var_5 == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( Static_Var_5 == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	Static_Var_6 = 0;
}

StartMoving()
{
	signal 2;
	set-signal-mask 2;
}

StopMoving()
{
	signal 2;
}

waking()
{
	while( TRUE )
	{
		if( Static_Var_1 == 2 OR Static_Var_1 == 1 )
		{
			emit-sfx 3 from w1;
			emit-sfx 3 from w2;
			emit-sfx 3 from w3;
			emit-sfx 3 from w4;
			emit-sfx 3 from w5;
			emit-sfx 3 from w6;
			emit-sfx 3 from w7;
			emit-sfx 3 from w8;
			emit-sfx 3 from w9;
			emit-sfx 3 from w10;
			emit-sfx 3 from w11;
			emit-sfx 3 from w12;
			emit-sfx 5 from w1;
			emit-sfx 5 from w2;
			emit-sfx 5 from w3;
			emit-sfx 5 from w4;
			emit-sfx 5 from w5;
			emit-sfx 5 from w6;
			emit-sfx 5 from w7;
			emit-sfx 5 from w8;
			emit-sfx 5 from w9;
			emit-sfx 5 from w10;
			emit-sfx 5 from w11;
			emit-sfx 5 from w12;
		}
		sleep 325;
	}
}

setSFXoccupy(state)
{
	Static_Var_1 = state;
}

Create()
{
	start-script waking();
	Static_Var_2 = 0;
	call-script InitState();
	start-script SmokeUnit();
	start-script BankClerck();
	Static_Var_4 = 1;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1;
	}
	start-script WobbleUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

StartBuilding(Func_Var_1)
{
	Static_Var_2 = Func_Var_1;
	start-script RequestState(0);
}

StopBuilding()
{
	start-script RequestState(1);
}

QueryNanoPiece(piecenum)
{
	if( Static_Var_4 == 1 )
	{
		piecenum = lath1;
	}
	if( Static_Var_4 == 2 )
	{
		piecenum = lath2;
	}
	if( Static_Var_4 == 3 )
	{
		piecenum = lath3;
	}
	++Static_Var_4;
	if( Static_Var_4 == 4 )
	{
		Static_Var_4 = 1;
	}
}

TargetHeading(Func_Var_1)
{
	Static_Var_2 = 0 - Func_Var_1;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode lath1 type NOHEATCLOUD;
		explode lath1 type NOHEATCLOUD;
		explode base type NOHEATCLOUD;
		explode nano1 type NOHEATCLOUD;
		explode nano2 type NOHEATCLOUD;
		explode door1 type NOHEATCLOUD;
		explode door2 type NOHEATCLOUD;
		explode nanoturd type NOHEATCLOUD;
		explode body type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode lath1 type NOHEATCLOUD;
		explode lath1 type NOHEATCLOUD;
		explode base type NOHEATCLOUD;
		explode nano1 type NOHEATCLOUD;
		explode nano2 type NOHEATCLOUD;
		explode door1 type NOHEATCLOUD;
		explode door2 type NOHEATCLOUD;
		explode nanoturd type NOHEATCLOUD;
		explode body type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode lath1 type NOHEATCLOUD;
		explode lath1 type NOHEATCLOUD;
		explode base type NOHEATCLOUD;
		explode nano1 type NOHEATCLOUD;
		explode nano2 type NOHEATCLOUD;
		explode door1 type NOHEATCLOUD;
		explode door2 type NOHEATCLOUD;
		explode nanoturd type NOHEATCLOUD;
		explode body type NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode lath1 type NOHEATCLOUD;
	explode lath1 type NOHEATCLOUD;
	explode base type NOHEATCLOUD;
	explode nano1 type NOHEATCLOUD;
	explode nano2 type NOHEATCLOUD;
	explode door1 type NOHEATCLOUD;
	explode door2 type NOHEATCLOUD;
	explode nanoturd type NOHEATCLOUD;
	explode body type NOHEATCLOUD;
	return (corpsetype);
}
