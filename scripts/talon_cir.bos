#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare_01, flare_02, flare_03, flare_04, flare_05, flare_06, flare_07, flare_08, flare_09, flare_10, flare_11, flare_12,
	   base, tower, stand, turret, sleeves, glow,
	   pod_01, pod_02, pod_03, pod_04, pod_05, pod_06, pod_07, pod_08, pod_09, pod_10, pod_11, pod_12;

static-var  gun_1;

// Signal definitions
#define SIG_AIM				2

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	turn sleeves to x-axis <-20.> speed <4.>;
	spin turret around y-axis speed <-15.>;
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{	
	gun_1 = 0;
	start-script SmokeUnit();
}

RestoreAfterDelay()
{
	sleep 8000;
	set-signal-mask 0;
	turn sleeves to x-axis <-20.> speed <4.>;
	spin turret around y-axis speed <-15.>;
}

AimTertiary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	stop-spin turret around y-axis;
	turn turret to y-axis heading speed <360.000000>;
	turn sleeves to x-axis <0.000000> - pitch speed <360.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeves around x-axis;
	Start-script RestoreAfterDelay();
	return (1);
}

FireTertiary()
{
	++gun_1;
	
	if( gun_1 == 12 )
	{
		gun_1 = 0;
	}
}

QueryTertiary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = flare_01;
	}
	if( gun_1 == 1 )
	{
		piecenum = flare_02;
	}
	if( gun_1 == 2 )
	{
		piecenum = flare_03;
	}
	if( gun_1 == 3 )
	{
		piecenum = flare_04;
	}
	if( gun_1 == 4 )
	{
		piecenum = flare_05;
	}
	if( gun_1 == 5 )
	{
		piecenum = flare_06;
	}
	if( gun_1 == 6 )
	{
		piecenum = flare_07;
	}
	if( gun_1 == 7 )
	{
		piecenum = flare_08;
	}
	if( gun_1 == 8 )
	{
		piecenum = flare_09;
	}
	if( gun_1 == 9 )
	{
		piecenum = flare_10;
	}
	if( gun_1 == 10 )
	{
		piecenum = flare_11;
	}
	if( gun_1 == 11 )
	{
		piecenum = flare_12;
	}
}


AimFromPrimary(piecenum)
{
	piecenum = turret;
}

AimFromTertiary(piecenum)
{
	piecenum = turret;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode sleeves type NOHEATCLOUD;
		explode pod_01 type NOHEATCLOUD;
		explode pod_04 type NOHEATCLOUD;
		explode pod_03 type NOHEATCLOUD;
		explode pod_02 type NOHEATCLOUD;
		explode turret type NOHEATCLOUD | FALL;
		explode stand type NOHEATCLOUD | FALL;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode sleeves type NOHEATCLOUD;
		explode pod_01 type FALL;
		explode pod_04 type FALL;
		explode pod_03 type NOHEATCLOUD;
		explode pod_02 type NOHEATCLOUD;
		explode turret type SHATTER | FALL;
		explode stand type SHATTER | FALL;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode sleeves type NOHEATCLOUD;
		explode pod_01 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode pod_04 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode pod_03 type NOHEATCLOUD | BITMAP1;
		explode pod_02 type NOHEATCLOUD | BITMAP1;
		explode turret type SHATTER | FALL;
		explode stand type SHATTER | FALL;
		return (0);
	}
	corpsetype = 3;
	explode sleeves type NOHEATCLOUD | BITMAP1;
	explode pod_01 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode pod_04 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | NOHEATCLOUD;
	explode pod_03 type NOHEATCLOUD;
	explode pod_02 type NOHEATCLOUD;
	explode turret type SHATTER | EXPLODE_ON_HIT | FALL;
	explode stand type SHATTER | EXPLODE_ON_HIT | FALL;
}
