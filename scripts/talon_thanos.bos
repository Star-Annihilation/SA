#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, flare, l1, l2, l3, l4, body, turret, barrel, sleeve, support,
       aimpoint1, aimpoint2, aimpoint3, w1, w2, w3, w4, w5, w6,
       w7, w8, w9, w10, w11, w12, w13, w14, w15, w16, w17, w18, w19, w20, w21, w22,
       w23, w24, wakes;

static-var  Static_Var_1, Static_Var_2, Static_Var_6, Static_Var_9, Static_Var_10, gun_1;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

ProjXPW(Func_Var_1, Func_Var_2)
{
	if( Func_Var_2 < -21840 )
	{
		Static_Var_9 = Func_Var_1 * ( Func_Var_2 + 32760 ) / 10920;
	}
	else if( Func_Var_2 > 21840 )
	{
		Static_Var_9 = Func_Var_1 * ( 32760 - Func_Var_2 ) / 10920;
	}
	else if( Func_Var_2 < -10920 )
	{
		Static_Var_9 = 0 - Func_Var_1;
	}
	else if( Func_Var_2 > 10920 )
	{
		Static_Var_9 = Func_Var_1;
	}
	else
	{
		Static_Var_9 = Func_Var_1 * Func_Var_2 / 10920;
	}
}

WobbleUnit()
{
	while( TRUE )
	{
		if( Static_Var_2 )
		{
			move base to y-axis [1.000000] speed [0.08];
		}
		else
		{
			move base to y-axis [-1.000000] speed [0.08];
		}
		Static_Var_2 = !Static_Var_2;
		sleep 750;
	}
}

RockZ(Func_Var_1, Func_Var_2)
{
	signal 16;
	set-signal-mask 16;
	call-script ProjXPW(10920 / Func_Var_2,Func_Var_1);
	Static_Var_10 = Static_Var_10 + Static_Var_9;
	Static_Var_9 = get ABS(Static_Var_10);
	while( Static_Var_9 > 91 )
	{
		turn base to z-axis Static_Var_10 speed Static_Var_9 * <0.>;
		wait-for-turn base around z-axis;
		Static_Var_10 = Static_Var_10 * -1 / 2;
		Static_Var_9 = get ABS(Static_Var_10);
	}
	turn base to z-axis <0.> speed <2.>;
}



waking()
{
	while( TRUE )
	{
		if( Static_Var_6 == 2 OR Static_Var_6 == 1 )
		{
			emit-sfx 3 from l1;
			emit-sfx 3 from l2;
			emit-sfx 3 from l3;
			emit-sfx 3 from l4;
		}
		sleep 325;
	}
}

RestoreAfterDelay()
{
	sleep 1000;
	spin barrel around z-axis speed <0.000000> accelerate <-10.000000>;
	sleep 2000;
	turn turret to y-axis <0.000000> speed <90.000000>;
	turn sleeve to x-axis <0.000000> speed <50.000000>;

}

setSFXoccupy(state)
{
	Static_Var_6 = state;
}

wakes2()
{
	while( TRUE )
	{
		if( Static_Var_6 == 2 OR Static_Var_6 == 1 )
		{
			emit-sfx 3 from w1;
			emit-sfx 3 from w2;
			emit-sfx 3 from w3;
			emit-sfx 3 from w4;
			emit-sfx 3 from w5;
			emit-sfx 3 from w6;
			emit-sfx 3 from w7;
			emit-sfx 3 from w8;
			emit-sfx 3 from w9;
			emit-sfx 3 from w10;
			emit-sfx 3 from w11;
			emit-sfx 3 from w12;
			emit-sfx 3 from w13;
			emit-sfx 3 from w14;
			emit-sfx 3 from w15;
			emit-sfx 3 from w16;
			emit-sfx 3 from w17;
			emit-sfx 3 from w18;
			emit-sfx 3 from w19;
			emit-sfx 3 from w20;
			emit-sfx 3 from w21;
			emit-sfx 3 from w22;
			emit-sfx 3 from w23;
			emit-sfx 3 from w24;
			emit-sfx 5 from w1;
			emit-sfx 5 from w2;
			emit-sfx 5 from w3;
			emit-sfx 5 from w4;
			emit-sfx 5 from w5;
			emit-sfx 5 from w6;
			emit-sfx 5 from w7;
			emit-sfx 5 from w8;
			emit-sfx 5 from w9;
			emit-sfx 5 from w10;
			emit-sfx 5 from w11;
			emit-sfx 5 from w12;
			emit-sfx 5 from w13;
			emit-sfx 5 from w14;
			emit-sfx 5 from w15;
			emit-sfx 5 from w16;
			emit-sfx 5 from w17;
			emit-sfx 5 from w18;
			emit-sfx 5 from w19;
			emit-sfx 5 from w20;
			emit-sfx 5 from w21;
			emit-sfx 5 from w22;
			emit-sfx 5 from w23;
			emit-sfx 5 from w24;
		}
		sleep 325;
	}
}
	
Create()
{

	Static_Var_1 = 0;
	gun_1 = 0;
	hide flare;
	dont-cache flare;
	
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	
	start-script waking();
	start-script SmokeUnit();
	start-script WobbleUnit();
}

RockUnit(anglex, anglez)
{
	signal 8;
	set-signal-mask 8;
	turn body to x-axis anglex speed <5.>;
	turn body to z-axis anglez speed <5.>;
	wait-for-turn body around z-axis;
	wait-for-turn body around x-axis;
	turn body to z-axis <0.> speed <2.>;
	turn body to x-axis <0.> speed <2.>;
}

StartMoving()
{
	signal 8;
	set-signal-mask 8;
}

StopMoving()
{
	signal 8;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

AimPrimary(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	//turn base to y-axis heading speed <10.000000>;
	//wait-for-turn base around y-axis; 
	return
	(1);
}

FirePrimary()
{

}

QueryPrimary(piecenum)
{
	piecenum = aimpoint1;
}

AimFromPrimary(piecenum)
{
	piecenum = body;
}

AimSecondary(heading, pitch)
{
	signal 4;
	set-signal-mask 4;

		turn turret to y-axis <0.000000> + heading speed <100.000000>;
		turn sleeve to x-axis <0.000000> - pitch speed <100.000000> ;
		wait-for-turn turret around y-axis;
		wait-for-turn sleeve around x-axis;

	start-script RestoreAfterDelay();
	return (1);
}

FireSecondary()
{
	emit-sfx 1025 from flare;
	move sleeve to z-axis [-1.] now;
	move sleeve to z-axis [0.] speed [1.];
	move barrel to z-axis [-1.] now;
	move barrel to z-axis [0.] speed [1.];
	
	spin barrel around z-axis speed <300.000000>;	
	sleep 300;
}


AimFromSecondary(piecenum)
{
	piecenum = turret;
}

QuerySecondary(piecenum)
{
	piecenum = flare;
}

AimTertiary() 
{
	signal 32;
	set-signal-mask 32;
	return(1);
}

FireTertiary()
{
	++gun_1;
	if (gun_1 == 2)
	{
		gun_1 = 0;
	}
}

QueryTertiary(piecenum)
{
	if (gun_1 == 0)
	{
		piecenum = aimpoint2;
	}
	if (gun_1 == 1)
	{
		piecenum = aimpoint3;
	}
}


AimFromTertiary(piecenum)
{
	piecenum = body;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type NOHEATCLOUD;
		explode turret type NOHEATCLOUD;
		explode sleeve type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type NOHEATCLOUD | FALL;
		explode turret type NOHEATCLOUD | FALL;
		explode sleeve type NOHEATCLOUD | FALL;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode body type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode turret type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		explode sleeve type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
		return (corpsetype);
	}
	corpsetype = 3;
	explode body type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode turret type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	explode sleeve type NOHEATCLOUD | FALL | SMOKE | FIRE | EXPLODE_ON_HIT;
	return (corpsetype);
}
